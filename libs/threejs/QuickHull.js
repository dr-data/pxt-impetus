!function(){var m,x,E,i,h=0;function t(){this.tolerance=-1,this.faces=[],this.newFaces=[],this.assigned=new e,this.unassigned=new e,this.vertices=[]}function T(){this.normal=new THREE.Vector3,this.midpoint=new THREE.Vector3,this.area=0,this.constant=0,this.outside=null,this.mark=h,this.edge=null}function a(t,e){this.vertex=t,this.prev=null,this.next=null,this.twin=null,this.face=e}function s(t){this.point=t,this.prev=null,this.next=null,this.face=null}function e(){this.head=null,this.tail=null}Object.assign(t.prototype,{setFromPoints:function(t){!0!==Array.isArray(t)&&console.error("THREE.QuickHull: Points parameter is not an array."),t.length<4&&console.error("THREE.QuickHull: The algorithm needs at least four points."),this.makeEmpty();for(var e=0,n=t.length;e<n;e++)this.vertices.push(new s(t[e]));return this.compute(),this},setFromObject:function(t){var a=[];return t.updateMatrixWorld(!0),t.traverse(function(t){var e,n,i,s=t.geometry;if(void 0!==s)if(s.isGeometry){var r=s.vertices;for(e=0,n=r.length;e<n;e++)(i=r[e].clone()).applyMatrix4(t.matrixWorld),a.push(i)}else if(s.isBufferGeometry){var o=s.attributes.position;if(void 0!==o)for(e=0,n=o.count;e<n;e++)(i=new THREE.Vector3).fromBufferAttribute(o,e).applyMatrix4(t.matrixWorld),a.push(i)}}),this.setFromPoints(a)},makeEmpty:function(){return this.faces=[],this.vertices=[],this},addVertexToFace:function(t,e){return null===(t.face=e).outside?this.assigned.append(t):this.assigned.insertBefore(e.outside,t),e.outside=t,this},removeVertexFromFace:function(t,e){return t===e.outside&&(null!==t.next&&t.next.face===e?e.outside=t.next:e.outside=null),this.assigned.remove(t),this},removeAllVerticesFromFace:function(t){if(null!==t.outside){for(var e=t.outside,n=t.outside;null!==n.next&&n.next.face===t;)n=n.next;return this.assigned.removeSubList(e,n),e.prev=n.next=null,t.outside=null,e}},deleteFaceVertices:function(t,e){var n=this.removeAllVerticesFromFace(t);if(void 0!==n)if(void 0===e)this.unassigned.appendChain(n);else{var i=n;do{var s=i.next;e.distanceToPoint(i.point)>this.tolerance?this.addVertexToFace(i,e):this.unassigned.append(i),i=s}while(null!==i)}return this},resolveUnassignedPoints:function(t){if(!1===this.unassigned.isEmpty()){var e=this.unassigned.first();do{for(var n=e.next,i=this.tolerance,s=null,r=0;r<t.length;r++){var o=t[r];if(o.mark===h){var a=o.distanceToPoint(e.point);if(i<a&&(i=a,s=o),i>1e3*this.tolerance)break}}null!==s&&this.addVertexToFace(e,s),e=n}while(null!==e)}return this},computeExtremes:function(){var t,e,n,i=new THREE.Vector3,s=new THREE.Vector3,r=[],o=[];for(t=0;t<3;t++)r[t]=o[t]=this.vertices[0];for(i.copy(this.vertices[0].point),s.copy(this.vertices[0].point),t=0,e=this.vertices.length;t<e;t++){var a=this.vertices[t],h=a.point;for(n=0;n<3;n++)h.getComponent(n)<i.getComponent(n)&&(i.setComponent(n,h.getComponent(n)),r[n]=a);for(n=0;n<3;n++)h.getComponent(n)>s.getComponent(n)&&(s.setComponent(n,h.getComponent(n)),o[n]=a)}return this.tolerance=3*Number.EPSILON*(Math.max(Math.abs(i.x),Math.abs(s.x))+Math.max(Math.abs(i.y),Math.abs(s.y))+Math.max(Math.abs(i.z),Math.abs(s.z))),{min:r,max:o}},computeInitialHull:function(){void 0===m&&(m=new THREE.Line3,x=new THREE.Plane,E=new THREE.Vector3);var t,e,n,i,s,r,o,a,h,u=this.vertices,l=this.computeExtremes(),c=l.min,d=l.max,p=0,f=0;for(r=0;r<3;r++)p<(h=d[r].point.getComponent(r)-c[r].point.getComponent(r))&&(p=h,f=r);for(e=c[f],n=d[f],p=0,m.set(e.point,n.point),r=0,o=this.vertices.length;r<o;r++)(t=u[r])!==e&&t!==n&&(m.closestPointToPoint(t.point,!0,E),p<(h=E.distanceToSquared(t.point))&&(p=h,i=t));for(p=-1,x.setFromCoplanarPoints(e.point,n.point,i.point),r=0,o=this.vertices.length;r<o;r++)(t=u[r])!==e&&t!==n&&t!==i&&p<(h=Math.abs(x.distanceToPoint(t.point)))&&(p=h,s=t);var v=[];if(x.distanceToPoint(s.point)<0)for(v.push(T.create(e,n,i),T.create(s,n,e),T.create(s,i,n),T.create(s,e,i)),r=0;r<3;r++)a=(r+1)%3,v[r+1].getEdge(2).setTwin(v[0].getEdge(a)),v[r+1].getEdge(1).setTwin(v[a+1].getEdge(0));else for(v.push(T.create(e,i,n),T.create(s,e,n),T.create(s,n,i),T.create(s,i,e)),r=0;r<3;r++)a=(r+1)%3,v[r+1].getEdge(2).setTwin(v[0].getEdge((3-r)%3)),v[r+1].getEdge(0).setTwin(v[a+1].getEdge(1));for(r=0;r<4;r++)this.faces.push(v[r]);for(r=0,o=u.length;r<o;r++)if((t=u[r])!==e&&t!==n&&t!==i&&t!==s){p=this.tolerance;var g=null;for(a=0;a<4;a++)p<(h=this.faces[a].distanceToPoint(t.point))&&(p=h,g=this.faces[a]);null!==g&&this.addVertexToFace(t,g)}return this},reindexFaces:function(){for(var t=[],e=0;e<this.faces.length;e++){var n=this.faces[e];n.mark===h&&t.push(n)}return this.faces=t,this},nextVertexToAdd:function(){if(!1===this.assigned.isEmpty()){var t,e=0,n=this.assigned.first().face,i=n.outside;do{var s=n.distanceToPoint(i.point);e<s&&(e=s,t=i),i=i.next}while(null!==i&&i.face===n);return t}},computeHorizon:function(t,e,n,i){var s;this.deleteFaceVertices(n),n.mark=1,s=null===e?e=n.getEdge(0):e.next;do{var r=s.twin,o=r.face;o.mark===h&&(o.distanceToPoint(t)>this.tolerance?this.computeHorizon(t,r,o,i):i.push(s)),s=s.next}while(s!==e);return this},addAdjoiningFace:function(t,e){var n=T.create(t,e.tail(),e.head());return this.faces.push(n),n.getEdge(-1).setTwin(e.twin),n.getEdge(0)},addNewFaces:function(t,e){this.newFaces=[];for(var n=null,i=null,s=0;s<e.length;s++){var r=e[s],o=this.addAdjoiningFace(t,r);null===n?n=o:o.next.setTwin(i),this.newFaces.push(o.face),i=o}return n.next.setTwin(i),this},addVertexToHull:function(t){var e=[];return this.unassigned.clear(),this.removeVertexFromFace(t,t.face),this.computeHorizon(t.point,null,t.face,e),this.addNewFaces(t,e),this.resolveUnassignedPoints(this.newFaces),this},cleanup:function(){return this.assigned.clear(),this.unassigned.clear(),this.newFaces=[],this},compute:function(){var t;for(this.computeInitialHull();void 0!==(t=this.nextVertexToAdd());)this.addVertexToHull(t);return this.reindexFaces(),this.cleanup(),this}}),Object.assign(T,{create:function(t,e,n){var i=new T,s=new a(t,i),r=new a(e,i),o=new a(n,i);return s.next=o.prev=r,r.next=s.prev=o,o.next=r.prev=s,i.edge=s,i.compute()}}),Object.assign(T.prototype,{getEdge:function(t){for(var e=this.edge;0<t;)e=e.next,t--;for(;t<0;)e=e.prev,t++;return e},compute:function(){void 0===i&&(i=new THREE.Triangle);var t=this.edge.tail(),e=this.edge.head(),n=this.edge.next.head();return i.set(t.point,e.point,n.point),i.getNormal(this.normal),i.getMidpoint(this.midpoint),this.area=i.getArea(),this.constant=this.normal.dot(this.midpoint),this},distanceToPoint:function(t){return this.normal.dot(t)-this.constant}}),Object.assign(a.prototype,{head:function(){return this.vertex},tail:function(){return this.prev?this.prev.vertex:null},length:function(){var t=this.head(),e=this.tail();return null!==e?e.point.distanceTo(t.point):-1},lengthSquared:function(){var t=this.head(),e=this.tail();return null!==e?e.point.distanceToSquared(t.point):-1},setTwin:function(t){return(this.twin=t).twin=this}}),Object.assign(e.prototype,{first:function(){return this.head},last:function(){return this.tail},clear:function(){return this.head=this.tail=null,this},insertBefore:function(t,e){return e.prev=t.prev,e.next=t,null===e.prev?this.head=e:e.prev.next=e,t.prev=e,this},insertAfter:function(t,e){return e.prev=t,e.next=t.next,null===e.next?this.tail=e:e.next.prev=e,t.next=e,this},append:function(t){return null===this.head?this.head=t:this.tail.next=t,t.prev=this.tail,t.next=null,this.tail=t,this},appendChain:function(t){for(null===this.head?this.head=t:this.tail.next=t,t.prev=this.tail;null!==t.next;)t=t.next;return this.tail=t,this},remove:function(t){return null===t.prev?this.head=t.next:t.prev.next=t.next,null===t.next?this.tail=t.prev:t.next.prev=t.prev,this},removeSubList:function(t,e){return null===t.prev?this.head=e.next:t.prev.next=e.next,null===e.next?this.tail=t.prev:e.next.prev=t.prev,this},isEmpty:function(){return null===this.head}}),THREE.QuickHull=t}();